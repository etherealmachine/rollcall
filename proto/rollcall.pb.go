// Code generated by protoc-gen-go.
// source: rollcall.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	rollcall.proto

It has these top-level messages:
	Account
	RegisterAccountRequest
	RegisterAccountReply
	GetAccountRequest
	GetAccountReply
	Order
	PutOrderRequest
	PutOrderReply
	TransactionsRequest
	Transaction
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Order_OrderType int32

const (
	Order_BID Order_OrderType = 0
	Order_ASK Order_OrderType = 1
)

var Order_OrderType_name = map[int32]string{
	0: "BID",
	1: "ASK",
}
var Order_OrderType_value = map[string]int32{
	"BID": 0,
	"ASK": 1,
}

func (x Order_OrderType) String() string {
	return proto1.EnumName(Order_OrderType_name, int32(x))
}
func (Order_OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type Account struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Balance  uint64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Holdings uint64 `protobuf:"varint,3,opt,name=holdings" json:"holdings,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto1.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterAccountRequest struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *RegisterAccountRequest) Reset()                    { *m = RegisterAccountRequest{} }
func (m *RegisterAccountRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterAccountRequest) ProtoMessage()               {}
func (*RegisterAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterAccountRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type RegisterAccountReply struct {
	AccountId string `protobuf:"bytes,1,opt,name=account_id" json:"account_id,omitempty"`
}

func (m *RegisterAccountReply) Reset()                    { *m = RegisterAccountReply{} }
func (m *RegisterAccountReply) String() string            { return proto1.CompactTextString(m) }
func (*RegisterAccountReply) ProtoMessage()               {}
func (*RegisterAccountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetAccountRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=account_id" json:"account_id,omitempty"`
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (m *GetAccountRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetAccountReply struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *GetAccountReply) Reset()                    { *m = GetAccountReply{} }
func (m *GetAccountReply) String() string            { return proto1.CompactTextString(m) }
func (*GetAccountReply) ProtoMessage()               {}
func (*GetAccountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetAccountReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type Order struct {
	Id         string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId  string          `protobuf:"bytes,2,opt,name=account_id" json:"account_id,omitempty"`
	Price      uint64          `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Quantity   uint64          `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	Expiration uint64          `protobuf:"varint,5,opt,name=expiration" json:"expiration,omitempty"`
	OrderType  Order_OrderType `protobuf:"varint,6,opt,name=order_type,enum=rollcall.Order_OrderType" json:"order_type,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto1.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PutOrderRequest struct {
	Order *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
}

func (m *PutOrderRequest) Reset()                    { *m = PutOrderRequest{} }
func (m *PutOrderRequest) String() string            { return proto1.CompactTextString(m) }
func (*PutOrderRequest) ProtoMessage()               {}
func (*PutOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PutOrderRequest) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type PutOrderReply struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id" json:"order_id,omitempty"`
}

func (m *PutOrderReply) Reset()                    { *m = PutOrderReply{} }
func (m *PutOrderReply) String() string            { return proto1.CompactTextString(m) }
func (*PutOrderReply) ProtoMessage()               {}
func (*PutOrderReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type TransactionsRequest struct {
}

func (m *TransactionsRequest) Reset()                    { *m = TransactionsRequest{} }
func (m *TransactionsRequest) String() string            { return proto1.CompactTextString(m) }
func (*TransactionsRequest) ProtoMessage()               {}
func (*TransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Transaction struct {
	BuyOrderId      string `protobuf:"bytes,1,opt,name=buy_order_id" json:"buy_order_id,omitempty"`
	SellOrderId     string `protobuf:"bytes,2,opt,name=sell_order_id" json:"sell_order_id,omitempty"`
	BuyerAccountId  string `protobuf:"bytes,3,opt,name=buyer_account_id" json:"buyer_account_id,omitempty"`
	SellerAccountId string `protobuf:"bytes,4,opt,name=seller_account_id" json:"seller_account_id,omitempty"`
	Price           uint64 `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Quantity        uint64 `protobuf:"varint,6,opt,name=quantity" json:"quantity,omitempty"`
	Tick            uint64 `protobuf:"varint,7,opt,name=tick" json:"tick,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto1.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto1.RegisterType((*Account)(nil), "rollcall.Account")
	proto1.RegisterType((*RegisterAccountRequest)(nil), "rollcall.RegisterAccountRequest")
	proto1.RegisterType((*RegisterAccountReply)(nil), "rollcall.RegisterAccountReply")
	proto1.RegisterType((*GetAccountRequest)(nil), "rollcall.GetAccountRequest")
	proto1.RegisterType((*GetAccountReply)(nil), "rollcall.GetAccountReply")
	proto1.RegisterType((*Order)(nil), "rollcall.Order")
	proto1.RegisterType((*PutOrderRequest)(nil), "rollcall.PutOrderRequest")
	proto1.RegisterType((*PutOrderReply)(nil), "rollcall.PutOrderReply")
	proto1.RegisterType((*TransactionsRequest)(nil), "rollcall.TransactionsRequest")
	proto1.RegisterType((*Transaction)(nil), "rollcall.Transaction")
	proto1.RegisterEnum("rollcall.Order_OrderType", Order_OrderType_name, Order_OrderType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AccountService service

type AccountServiceClient interface {
	RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*RegisterAccountReply, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*RegisterAccountReply, error) {
	out := new(RegisterAccountReply)
	err := grpc.Invoke(ctx, "/rollcall.AccountService/RegisterAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := grpc.Invoke(ctx, "/rollcall.AccountService/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceServer interface {
	RegisterAccount(context.Context, *RegisterAccountRequest) (*RegisterAccountReply, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AccountServiceServer).RegisterAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AccountServiceServer).GetAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rollcall.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _AccountService_RegisterAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for MarketService service

type MarketServiceClient interface {
	PutOrder(ctx context.Context, in *PutOrderRequest, opts ...grpc.CallOption) (*PutOrderReply, error)
	Transactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (MarketService_TransactionsClient, error)
}

type marketServiceClient struct {
	cc *grpc.ClientConn
}

func NewMarketServiceClient(cc *grpc.ClientConn) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) PutOrder(ctx context.Context, in *PutOrderRequest, opts ...grpc.CallOption) (*PutOrderReply, error) {
	out := new(PutOrderReply)
	err := grpc.Invoke(ctx, "/rollcall.MarketService/PutOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) Transactions(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (MarketService_TransactionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MarketService_serviceDesc.Streams[0], c.cc, "/rollcall.MarketService/Transactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketServiceTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketService_TransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type marketServiceTransactionsClient struct {
	grpc.ClientStream
}

func (x *marketServiceTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MarketService service

type MarketServiceServer interface {
	PutOrder(context.Context, *PutOrderRequest) (*PutOrderReply, error)
	Transactions(*TransactionsRequest, MarketService_TransactionsServer) error
}

func RegisterMarketServiceServer(s *grpc.Server, srv MarketServiceServer) {
	s.RegisterService(&_MarketService_serviceDesc, srv)
}

func _MarketService_PutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MarketServiceServer).PutOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MarketService_Transactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketServiceServer).Transactions(m, &marketServiceTransactionsServer{stream})
}

type MarketService_TransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type marketServiceTransactionsServer struct {
	grpc.ServerStream
}

func (x *marketServiceTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

var _MarketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rollcall.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutOrder",
			Handler:    _MarketService_PutOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transactions",
			Handler:       _MarketService_Transactions_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x8d, 0x93, 0x38, 0x4e, 0x26, 0x4d, 0x9c, 0xec, 0xd7, 0x7e, 0x38, 0x46, 0xa9, 0xa2, 0x95,
	0x90, 0xaa, 0x22, 0x55, 0xc8, 0x08, 0xa9, 0x57, 0x88, 0x54, 0xfc, 0x55, 0x08, 0x05, 0xb9, 0xe5,
	0x86, 0x9b, 0xc8, 0x71, 0x56, 0xc5, 0xaa, 0x65, 0xbb, 0xeb, 0x35, 0x22, 0xcf, 0xc2, 0x43, 0xf0,
	0x4c, 0x3c, 0x01, 0xaf, 0xc0, 0x7a, 0xd7, 0x7f, 0x75, 0x0c, 0x88, 0x9b, 0x64, 0xe7, 0xcc, 0x99,
	0x99, 0x93, 0x33, 0xbb, 0x81, 0x31, 0x0d, 0x7d, 0xdf, 0x75, 0x7c, 0xff, 0x2c, 0xa2, 0x21, 0x0b,
	0x51, 0x3f, 0x8f, 0xf1, 0x0a, 0xb4, 0xa5, 0xeb, 0x86, 0x49, 0xc0, 0xd0, 0x18, 0xda, 0xde, 0xd6,
	0x50, 0x16, 0xca, 0xc9, 0xc0, 0xe6, 0x27, 0x64, 0x80, 0xb6, 0x71, 0x7c, 0x27, 0x70, 0x89, 0xd1,
	0xe6, 0x60, 0xd7, 0xce, 0x43, 0x64, 0x42, 0xff, 0x73, 0xe8, 0x6f, 0xbd, 0xe0, 0x26, 0x36, 0x3a,
	0x22, 0x55, 0xc4, 0xf8, 0x15, 0xfc, 0x6f, 0x93, 0x1b, 0x2f, 0x66, 0x84, 0x66, 0x8d, 0x6d, 0x72,
	0x97, 0x90, 0x98, 0xa1, 0xc7, 0xa0, 0x39, 0x12, 0x11, 0x43, 0x86, 0xd6, 0xf4, 0xac, 0x90, 0x95,
	0x53, 0x73, 0x06, 0x7e, 0x06, 0x87, 0x7b, 0x6d, 0x22, 0x7f, 0x87, 0xe6, 0x00, 0x19, 0x65, 0x5d,
	0x88, 0x1d, 0x64, 0xc8, 0xe5, 0x16, 0x5b, 0x30, 0x7d, 0x43, 0x58, 0x6d, 0xf0, 0x5f, 0x6a, 0x9e,
	0x83, 0x5e, 0xad, 0x49, 0xa7, 0xfc, 0x93, 0xd4, 0x1f, 0x0a, 0xa8, 0x2b, 0xba, 0x25, 0x74, 0xcf,
	0xc1, 0xfb, 0x83, 0xdb, 0xb5, 0xc1, 0xe8, 0x10, 0xd4, 0x88, 0x7a, 0xdc, 0x5e, 0xe9, 0xa1, 0x0c,
	0x52, 0x73, 0xef, 0x12, 0x27, 0x60, 0x1e, 0xdb, 0x19, 0x5d, 0x69, 0x6e, 0x1e, 0xa3, 0x63, 0x00,
	0xf2, 0x35, 0xf2, 0xa8, 0xc3, 0xbc, 0x30, 0x30, 0x54, 0x91, 0xad, 0x20, 0xe8, 0x1c, 0x20, 0x4c,
	0x95, 0xac, 0xd9, 0x2e, 0x22, 0x46, 0x8f, 0xe7, 0xc7, 0xd6, 0xac, 0x94, 0x2e, 0x54, 0xca, 0xcf,
	0x6b, 0x4e, 0xb0, 0x07, 0x61, 0x7e, 0xc4, 0x73, 0x18, 0x14, 0x38, 0xd2, 0xa0, 0x73, 0x71, 0xf9,
	0x72, 0xd2, 0x4a, 0x0f, 0xcb, 0xab, 0x77, 0x13, 0x05, 0x9f, 0x83, 0xfe, 0x21, 0x61, 0x82, 0x91,
	0xbb, 0xfa, 0x08, 0x54, 0x51, 0x9e, 0x39, 0xa4, 0xd7, 0xc6, 0xd8, 0x32, 0x8b, 0x4f, 0x61, 0x54,
	0x56, 0xa6, 0xde, 0xce, 0xa0, 0x2f, 0x35, 0x16, 0x56, 0x69, 0x22, 0xe6, 0x9b, 0x38, 0x82, 0xff,
	0xae, 0xa9, 0x13, 0xc4, 0x8e, 0x9b, 0xfe, 0x9a, 0x38, 0x9b, 0x84, 0x7f, 0x2a, 0x30, 0xac, 0xe0,
	0x68, 0x01, 0x07, 0x9b, 0x64, 0xb7, 0xae, 0x75, 0x01, 0x8e, 0xad, 0x64, 0x23, 0x84, 0x61, 0x14,
	0x13, 0xdf, 0x2f, 0x29, 0xd2, 0xfb, 0x61, 0x0a, 0xe6, 0x9c, 0x13, 0x98, 0xf0, 0x0a, 0x9e, 0xae,
	0xac, 0xa8, 0x23, 0x68, 0x63, 0x81, 0x2f, 0x8b, 0x3d, 0x9d, 0xc2, 0x34, 0x2d, 0xbc, 0x4f, 0xed,
	0x0a, 0xaa, 0x2e, 0x13, 0xcb, 0xfd, 0x9d, 0xaa, 0xbf, 0xdb, 0x69, 0xaf, 0xb6, 0x53, 0x04, 0x5d,
	0xe6, 0xb9, 0xb7, 0x86, 0x26, 0x70, 0x71, 0xb6, 0xbe, 0x2b, 0x30, 0xce, 0x7a, 0x5e, 0x11, 0xfa,
	0x25, 0x6d, 0xf1, 0x11, 0xf4, 0xda, 0x83, 0x40, 0x8b, 0xd2, 0xf2, 0xe6, 0x27, 0x67, 0x1e, 0xff,
	0x81, 0xc1, 0x77, 0x81, 0x5b, 0xe8, 0x35, 0x40, 0x79, 0xf9, 0xd1, 0xc3, 0x92, 0xbf, 0xf7, 0x8c,
	0xcc, 0x59, 0x73, 0x52, 0xf4, 0xb1, 0xbe, 0x29, 0x30, 0x7a, 0xef, 0xd0, 0x5b, 0x52, 0x08, 0x7e,
	0x01, 0xfd, 0x7c, 0xf1, 0xa8, 0x52, 0x5a, 0xbb, 0x46, 0xe6, 0x83, 0xa6, 0x94, 0xd4, 0xf6, 0x16,
	0x0e, 0xaa, 0xd7, 0x01, 0xcd, 0x4b, 0x6a, 0xc3, 0x35, 0x31, 0x8f, 0x1a, 0xd3, 0xb8, 0xf5, 0x44,
	0xb9, 0xd0, 0x3e, 0xa9, 0xe2, 0x8f, 0x6f, 0xd3, 0x13, 0x5f, 0x4f, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x73, 0x65, 0xaf, 0xd8, 0x11, 0x05, 0x00, 0x00,
}
